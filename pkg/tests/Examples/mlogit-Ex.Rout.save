
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mlogit"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "mlogit-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('mlogit')
Loading required package: Formula
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: lmtest
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ModeCanada")
> ### * ModeCanada
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ModeCanada
> ### Title: Mode Choice for the Montreal-Toronto Corridor
> ### Aliases: ModeCanada
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("ModeCanada", package = "mlogit")
> bususers <- with(ModeCanada, case[choice == 1 & alt == "bus"])
> ModeCanada <- subset(ModeCanada, ! case %in% bususers)
> ModeCanada <- subset(ModeCanada, noalt == 4)
> ModeCanada <- subset(ModeCanada, alt != "bus")
> ModeCanada$alt <- ModeCanada$alt[drop = TRUE]
> KoppWen00 <- mlogit.data(ModeCanada, shape='long', chid.var = 'case',
+                          alt.var = 'alt', choice='choice',
+                          drop.index=TRUE)
> pcl <- mlogit(choice~freq+cost+ivt+ovt, KoppWen00, reflevel='car',
+               nests='pcl', constPar=c('iv:train.air'))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ModeCanada", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("effects.mlogit")
> ### * effects.mlogit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: effects.mlogit
> ### Title: Marginal effects of the covariates
> ### Aliases: effects.mlogit
> ### Keywords: regression
> 
> ### ** Examples
> 
> 
> data("Fishing", package = "mlogit")
> library("zoo")
> Fish <- mlogit.data(Fishing, varying = c(2:9), shape = "wide", choice = "mode")
> m <- mlogit(mode ~ price | income | catch, data = Fish)
> # compute a data.frame containing the mean value of the covariates in
> # the sample
> z <- with(Fish, data.frame(price = tapply(price, index(m)$alt, mean),
+                            catch = tapply(catch, index(m)$alt, mean),
+                            income = mean(income)))
> # compute the marginal effects (the second one is an elasticity
> effects(m, covariate = "income", data = z)
        beach          boat       charter          pier 
 1.132965e-06  3.113068e-05 -2.408677e-05 -8.176877e-06 
> effects(m, covariate = "price", type = "rr", data = z)
             beach       boat    charter       pier
beach   -2.4634447  0.1512128  0.1512128  0.1512128
boat     0.5797049 -0.8172610  0.5797049  0.5797049
charter  0.9741351  0.9741351 -1.1590941  0.9741351
pier     0.1844507  0.1844507  0.1844507 -2.4302068
> effects(m, covariate = "catch", type = "ar", data = z)
               beach        boat     charter         pier
beach    0.040943135 -0.01803326 -0.01984425 -0.003065622
boat    -0.010447074  0.10568073 -0.08249023 -0.012743428
charter -0.012623645 -0.09057996  0.11860203 -0.015398428
pier    -0.001887074 -0.01354055 -0.01490036  0.030327981
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("effects.mlogit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hmftest")
> ### * hmftest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hmftest
> ### Title: Hausman-McFadden Test
> ### Aliases: hmftest hmftest.formula hmftest.mlogit hmftest.formula
> ###   hmftest.mlogit
> ### Keywords: htest
> 
> ### ** Examples
> 
> 
> ## from Greene's Econometric Analysis p. 731
> 
> data("TravelMode",package="AER")
> TravelMode <- mlogit.data(TravelMode,choice="choice",shape="long",
+                           alt.var="mode",chid.var="individual")
> 
> ## Create a variable of income only for the air mode
> 
> TravelMode$avinc <- with(TravelMode,(mode=='air')*income)
> 
> ## Estimate the model on all alternatives, with car as the base level
> ## like in Greene's book.
> 
> #x <- mlogit(choice~wait+gcost+avinc,TravelMode,reflevel="car")
> x <- mlogit(choice~wait+gcost+avinc,TravelMode)
> 
> ## Estimate the same model for ground modes only (the variable avinc
> ## must be dropped because it is 0 for every observation
> 
> g <- mlogit(choice~wait+gcost,TravelMode,reflevel="car",
+             alt.subset=c("car","bus","train"))
> 
> ## Compute the test
> 
> hmftest(x,g)

	Hausman-McFadden test

data:  TravelMode
chisq = -10.77, df = 4, p-value = 1
alternative hypothesis: IIA is rejected

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hmftest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mFormula")
> ### * mFormula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mFormula
> ### Title: Model formula for logit models
> ### Aliases: mFormula is.mFormula mFormula.formula model.matrix.mFormula
> ###   model.frame.mFormula mFormula.formula is.mFormula
> ###   model.frame.mFormula model.matrix.mFormula
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> data("Fishing", package = "mlogit")
> Fish <- mlogit.data(Fishing, varying = c(2:9), shape = "wide", choice =
+ "mode")
> 
> # a formula with to alternative specific variables (price and
> # catch) and an intercept
> f1 <- mFormula(mode ~ price + catch)
> head(model.matrix(f1, Fish), 2)
        boat:(intercept) charter:(intercept) pier:(intercept)  price  catch
1.beach                0                   0                0 157.93 0.0678
1.boat                 1                   0                0 157.93 0.2601
> 
> # same, with an individual specific variable (income)
> f2 <- mFormula(mode ~ price + catch | income)
> head(model.matrix(f2, Fish), 2)
        boat:(intercept) charter:(intercept) pier:(intercept)  price  catch
1.beach                0                   0                0 157.93 0.0678
1.boat                 1                   0                0 157.93 0.2601
        boat:income charter:income pier:income
1.beach       0.000              0           0
1.boat     7083.332              0           0
> 
> # same, without an intercept
> f3 <- mFormula(mode ~ price + catch | income + 0)
> head(model.matrix(f3, Fish), 2)
         price  catch income:boat income:charter income:pier
1.beach 157.93 0.0678       0.000              0           0
1.boat  157.93 0.2601    7083.332              0           0
> 
> # same as f2, but now, coefficients of catch are alternative
> # specific
> f4 <- mFormula(mode ~ price | income | catch)
> head(model.matrix(f4, Fish), 2)
        boat:(intercept) charter:(intercept) pier:(intercept)  price
1.beach                0                   0                0 157.93
1.boat                 1                   0                0 157.93
        boat:income charter:income pier:income beach:catch boat:catch
1.beach       0.000              0           0      0.0678     0.0000
1.boat     7083.332              0           0      0.0000     0.2601
        charter:catch pier:catch
1.beach             0          0
1.boat              0          0
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mFormula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mlogit")
> ### * mlogit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mlogit
> ### Title: Multinomial logit model
> ### Aliases: mlogit
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## Cameron and Trivedi's Microeconometrics p.493 There are two
> ## alternative specific variables : price and catch one individual
> ## specific variable (income) and four fishing mode : beach, pier, boat,
> ## charter
> 
> data("Fishing", package = "mlogit")
> Fish <- mlogit.data(Fishing, varying = c(2:9), shape = "wide", choice = "mode")
> 
> ## a pure "conditional" model
> summary(mlogit(mode ~ price + catch, data = Fish))

Call:
mlogit(formula = mode ~ price + catch, data = Fish, method = "nr")

Frequencies of alternatives:
  beach    boat charter    pier 
0.11337 0.35364 0.38240 0.15059 

nr method
7 iterations, 0h:0m:0s 
g'(-H)^-1g = 6.22E-06 
successive function values within tolerance limits 

Coefficients :
                      Estimate Std. Error  z-value  Pr(>|z|)    
boat:(intercept)     0.8713749  0.1140428   7.6408 2.154e-14 ***
charter:(intercept)  1.4988884  0.1329328  11.2755 < 2.2e-16 ***
pier:(intercept)     0.3070552  0.1145738   2.6800 0.0073627 ** 
price               -0.0247896  0.0017044 -14.5444 < 2.2e-16 ***
catch                0.3771689  0.1099707   3.4297 0.0006042 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood: -1230.8
McFadden R^2:  0.17823 
Likelihood ratio test : chisq = 533.88 (p.value = < 2.22e-16)
> 
> ## a pure "multinomial model"
> summary(mlogit(mode ~ 0 | income, data = Fish))

Call:
mlogit(formula = mode ~ 0 | income, data = Fish, method = "nr")

Frequencies of alternatives:
  beach    boat charter    pier 
0.11337 0.35364 0.38240 0.15059 

nr method
4 iterations, 0h:0m:0s 
g'(-H)^-1g = 8.32E-07 
gradient close to zero 

Coefficients :
                       Estimate  Std. Error z-value  Pr(>|z|)    
boat:(intercept)     7.3892e-01  1.9673e-01  3.7560 0.0001727 ***
charter:(intercept)  1.3413e+00  1.9452e-01  6.8955 5.367e-12 ***
pier:(intercept)     8.1415e-01  2.2863e-01  3.5610 0.0003695 ***
boat:income          9.1906e-05  4.0664e-05  2.2602 0.0238116 *  
charter:income      -3.1640e-05  4.1846e-05 -0.7561 0.4495908    
pier:income         -1.4340e-04  5.3288e-05 -2.6911 0.0071223 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood: -1477.2
McFadden R^2:  0.013736 
Likelihood ratio test : chisq = 41.145 (p.value = 6.0931e-09)
> 
> ## which can also be estimated using multinom (package nnet)
> library("nnet")
> summary(multinom(mode ~ income, data = Fishing))
# weights:  12 (6 variable)
initial  value 1638.599935 
iter  10 value 1477.150646
final  value 1477.150569 
converged
Call:
multinom(formula = mode ~ income, data = Fishing)

Coefficients:
        (Intercept)        income
pier      0.8141506 -1.434028e-04
boat      0.7389178  9.190824e-05
charter   1.3412901 -3.163844e-05

Std. Errors:
         (Intercept)       income
pier    5.816490e-09 2.668383e-05
boat    3.209473e-09 2.057825e-05
charter 3.921689e-09 2.116425e-05

Residual Deviance: 2954.301 
AIC: 2966.301 
> 
> ## a "mixed" model
> m <- mlogit(mode ~ price+ catch | income, data = Fish)
> summary(m)

Call:
mlogit(formula = mode ~ price + catch | income, data = Fish, 
    method = "nr")

Frequencies of alternatives:
  beach    boat charter    pier 
0.11337 0.35364 0.38240 0.15059 

nr method
7 iterations, 0h:0m:0s 
g'(-H)^-1g = 1.37E-05 
successive function values within tolerance limits 

Coefficients :
                       Estimate  Std. Error  z-value  Pr(>|z|)    
boat:(intercept)     5.2728e-01  2.2279e-01   2.3667 0.0179485 *  
charter:(intercept)  1.6944e+00  2.2405e-01   7.5624 3.952e-14 ***
pier:(intercept)     7.7796e-01  2.2049e-01   3.5283 0.0004183 ***
price               -2.5117e-02  1.7317e-03 -14.5042 < 2.2e-16 ***
catch                3.5778e-01  1.0977e-01   3.2593 0.0011170 ** 
boat:income          8.9440e-05  5.0067e-05   1.7864 0.0740345 .  
charter:income      -3.3292e-05  5.0341e-05  -0.6613 0.5084031    
pier:income         -1.2758e-04  5.0640e-05  -2.5193 0.0117582 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood: -1215.1
McFadden R^2:  0.18868 
Likelihood ratio test : chisq = 565.17 (p.value = < 2.22e-16)
> 
> ## same model with charter as the reference level
> m <- mlogit(mode ~ price+ catch | income, data = Fish, reflevel = "charter")
> 
> ## same model with a subset of alternatives : charter, pier, beach
> m <- mlogit(mode ~ price+ catch | income, data = Fish,
+             alt.subset = c("charter", "pier", "beach"))
> 
> ## model on unbalanced data i.e. for some observations, some
> ## alternatives are missing
> # a data.frame in wide format with two missing prices
> Fishing2 <- Fishing
> Fishing2[1, "price.pier"] <- Fishing2[3, "price.beach"] <- NA
> mlogit(mode~price+catch|income, Fishing2, shape="wide", choice="mode", varying = 2:9)

Call:
mlogit(formula = mode ~ price + catch | income, data = Fishing2,     shape = "wide", choice = "mode", varying = 2:9, method = "nr")

Coefficients:
   boat:(intercept)  charter:(intercept)     pier:(intercept)  
         5.2790e-01           1.6948e+00           7.7663e-01  
              price                catch          boat:income  
        -2.5110e-02           3.5768e-01           8.9122e-05  
     charter:income          pier:income  
        -3.3611e-05          -1.2700e-04  

> 
> # a data.frame in long format with three missing lines
> data("TravelMode", package = "AER")
> Tr2 <- TravelMode[-c(2, 7, 9),]
> mlogit(choice~wait+gcost|income+size, Tr2, shape = "long",
+        chid.var = "individual", alt.var="mode", choice = "choice")

Call:
mlogit(formula = choice ~ wait + gcost | income + size, data = Tr2,     shape = "long", chid.var = "individual", alt.var = "mode",     choice = "choice", method = "nr")

Coefficients:
train:(intercept)    bus:(intercept)    car:(intercept)               wait  
       -2.3115942         -3.4504941         -7.8913907         -0.1013180  
            gcost       train:income         bus:income         car:income  
       -0.0197064         -0.0589804         -0.0277037         -0.0041153  
       train:size           bus:size           car:size  
        1.3289497          1.0090796          1.0392585  

> 
> ## An heteroscedastic logit model
> data("TravelMode", package = "AER")
> hl <- mlogit(choice ~ wait + travel + vcost, TravelMode,
+              shape = "long", chid.var = "individual", alt.var = "mode",
+              method = "bfgs", heterosc = TRUE, tol = 10)
> 
> ## A nested logit model
> TravelMode$avincome <- with(TravelMode, income * (mode == "air"))
> TravelMode$time <- with(TravelMode, travel + wait)/60
> TravelMode$timeair <- with(TravelMode, time * I(mode == "air"))
> TravelMode$income <- with(TravelMode, income / 10)
> # Hensher and Greene (2002), table 1 p.8-9 model 5
> TravelMode$incomeother <- with(TravelMode, ifelse(mode %in% c('air', 'car'), income, 0))
> nl <- mlogit(choice~gcost+wait+incomeother, TravelMode,
+              shape='long', alt.var='mode',
+              nests=list(public=c('train', 'bus'), other=c('car','air')))
> # same with a comon nest elasticity (model 1)
> nl2 <- update(nl, un.nest.el = TRUE)
> 
> ## a probit model
> ## Not run: 
> ##D pr <- mlogit(choice ~ wait + travel + vcost, TravelMode,
> ##D              shape = "long", chid.var = "individual", alt.var = "mode",
> ##D              probit = TRUE)
> ## End(Not run)
> 
> ## a mixed logit model
> ## Not run: 
> ##D rpl <- mlogit(mode ~ price+ catch | income, Fishing, varying = 2:9,
> ##D               shape = 'wide', rpar = c(price= 'n', catch = 'n'),
> ##D               correlation = TRUE, halton = NA,
> ##D               R = 10, tol = 10, print.level = 0)
> ##D summary(rpl)
> ##D rpar(rpl)
> ##D cor.mlogit(rpl)
> ##D cov.mlogit(rpl)
> ##D rpar(rpl, "catch")
> ##D summary(rpar(rpl, "catch"))
> ## End(Not run)
> 
> # a ranked ordered model
> data("Game", package = "mlogit")
> g <- mlogit(ch~own|hours, Game, choice='ch', varying = 1:12,
+             ranked=TRUE, shape="wide", reflevel="PC")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mlogit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:nnet’

> nameEx("mlogit.data")
> ### * mlogit.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mlogit.data
> ### Title: data.frame for logit model
> ### Aliases: mlogit.data [[<-.mlogit.data $<-.mlogit.data print.pseries
> ###   index mean.mlogit.data formula.mlogit.data print.mlogit.data
> ###   print.mlogit.data index.mlogit.data [.mlogit.data [[.mlogit.data
> ###   $.mlogit.data $<-.mlogit.data [[<-.mlogit.data mean.mlogit.data
> ### Keywords: attribute
> 
> ### ** Examples
> 
> # ModeChoice is a long data.frame 
> 
> data("TravelMode", package = "AER")
> TM <- mlogit.data(TravelMode, choice = "choice", shape = "long",
+                  alt.levels = c("air", "train", "bus", "car"))
> 
> # Same but the alt variable called mode is provided
> 
> TM <- mlogit.data(TravelMode ,choice = "choice", shape = "long",
+                   alt.var = "mode")
> 
> # Same but the chid variable called individual is provided
> 
> TM <- mlogit.data(TravelMode, choice = "choice",
+                   shape = "long", id.var = "individual",
+                   alt.levels = c("air", "train", "bus", "car"))
> 
> # Same but with two own provided variables
> 
> TM <- mlogit.data(TravelMode, choice = "choice", shape = "long",
+                  id.var = "individual", alt.var = "mode")
> 
> #  Same but with two own provided variables which are deleted from the
> #  data.frame
> 
> TM <- mlogit.data(TravelMode, choice = "choice", shape = "long",
+                  id.var = "individual", alt.var = "mode", drop.index = TRUE)
> 
> #  Train is a wide data.frame with columns 'choiceid' is the choice
> #  index, the alternatives are named "ch1" and "ch2", the opposite of
> #  the variables is returned
> 
> data("Train", package = "mlogit")
> Train <- mlogit.data(Train, choice = "choice", shape = "wide",
+                      varying = 4:11, alt.levels = c("A", "B"), sep = "_",
+                      opposite = c("price", "time", "change", "comfort"))
> 
> data("HC", package = "mlogit")
> HC <- mlogit.data(HC, choice = "depvar", varying=c(2:8, 10:16), shape="wide")
> 
> # Game is a data.frame in wide format for which the response is a
> #  ranking variable
> 
> data("Game", package = "mlogit")
> G <- mlogit.data(Game, shape="wide", varying = 1:12, alt.var = 'platform',
+                  drop.index = TRUE, choice="ch", ranked =TRUE)
> 
> # Game2 contains the same data, but in long format 
> data("Game2", package = "mlogit")
> G2 <- mlogit.data(Game2,  shape='long', choice="ch", alt.var = 'platform', ranked = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mlogit.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("scoretest")
> ### * scoretest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: scoretest
> ### Title: The three tests for mlogit models
> ### Aliases: scoretest scoretest.mlogit scoretest.default waldtest.mlogit
> ###   waldtest lrtest.mlogit lrtest scoretest.mlogit scoretest.default
> ###   waldtest.mlogit lrtest.mlogit
> ### Keywords: htest
> 
> ### ** Examples
> 
> library("mlogit")
> library("lmtest")
> data("TravelMode", package = "AER")
> ml <- mlogit(choice ~ wait + travel + vcost, TravelMode,
+              shape = "long", chid.var = "individual", alt.var = "mode")
> hl <- mlogit(choice ~ wait + travel + vcost, TravelMode,
+              shape = "long", chid.var = "individual", alt.var = "mode",
+              method = "bfgs", heterosc = TRUE)
> lrtest(ml, hl)
Likelihood ratio test

Model 1: choice ~ wait + travel + vcost
Model 2: choice ~ wait + travel + vcost
  #Df  LogLik Df  Chisq Pr(>Chisq)
1   6 -192.89                     
2   9 -190.18  3 5.4203     0.1435
> waldtest(hl)

	Wald test

data:  homoscedasticity
chisq = 39.944, df = 3, p-value = 1.095e-08

> scoretest(ml, heterosc = TRUE)

	score test

data:  heterosc = TRUE
chisq = 26.028, df = 3, p-value = 9.41e-06
alternative hypothesis: heteroscedastic model

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("scoretest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.5 0.068 4.574 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
